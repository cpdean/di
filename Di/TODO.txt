
TODO
====

Add abstract InterruptCommand class, with parser support

Add abstract MenuMode subclass of WindowMode

    Each MenuMode binding has a string attached to it which describes it

    Always show all the bindings (for layout consistency), but gray out invalid ones

Bind "wa" to CreateAndFocusWindow

Test the CreateAndFocusWindow command

Add support for projects

    Search up from the current directory for di-project.ini
        Globs for inclusion and exclusion of files into project
        Project name (show it, and nothing else other than "Di", in the title bar)

    Add commands:
        Close the current window
        Load a file in the current window

    Keep a list of project files sorted by most-recently-visible
        Prefer the most-recently-visible file over other matches
        Already-visible files should be least-preferred
            But allow a file to become visible in multiple places

Add support for "undo"

    Keep separate "undo" and "redo" stacks for each file in the project

    An undo entry can be a checkpoint, a chunk, a sequence of chunks

    A checkpoint is a clone of the buffer

    A chunk either adds or removes sequential text (but not both)
        Add specifies start point and length
        Remove specifies start point and text

    Call BeginUserAction and EndUserAction inside the key press handler

    Have event handlers which create chunks and sequence them automatically

Add auto-save
    Flash a message in the status bar each time auto-save occurs

Store session state alongside the controlling di-project.ini file
    Window layout and position in each window
    Undo and redo stacks

Add support for the pasting stack
    Visual support
    Delete-and-push command
    Push command
    Pop-and-paste command
    Pop-and-discard command
    Add to session

Add support for language plug-ins, which will ultimately provide:
    Behavior for Return and Tab commands
        Tab should jump to the "correct" column if it is only preceded by whitespace on the line,
        and should otherwise begin automatic completion.
    Logic for moving by words and by matching brackets
    Syntax coloring
    Logic for dividing the buffer into subbuffers

Add intelligent window layout

    Allow multiple windows in a column
        By default, group functions from the same file in a column
            If the whole file is open, put it at the top of the column

    Group columns by directory
        Shade the background behind each group in a unique color
        Highlight name references in the source code in the same color as the directory containing the referent

Configuration support
    $HOME/di-user.ini
    $ETC/di-config.ini

Add a configurable list of files to always ignore
    Put a nice long list of defaults in di-config.ini

Make keybindings configurable

    In the model, map keybindings to command names as strings.

    Add an attribute to each command class that specifies its name as a string.

    At startup, use reflection on our assembly to find all implementors of
    ICommand which have the name attribute, and add them to a lookup table.

    Eventually, there will be a configuration option allowing other assemblies
    containing commands to be loaded dynamically and searched for commands.
    
    Also make the initial mode configurable

Fix scrolling to show cursor even when it's at the start of the last, empty line of the file.
